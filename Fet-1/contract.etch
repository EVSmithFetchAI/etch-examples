//------------------------------------------------------------------------------
//
//   Copyright 2019 Fetch.AI Limited
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//
//------------------------------------------------------------------------------

// This contract require release 0.4.0 or above
// Note that this is experimental functionality

//Fungible token generation contract 
function main()
  var u_supply = 12619924713u64;
  var u_transfer = 977256u64;
  var supply = UInt256(  u_supply );
  var owner = Address("2ifr5dSFRAnXexBMC3HYEVp3JHSuz7KBPXWDRBV4xdFrqGy6R9");
  createSupplyImpl(owner, supply);

  if(totalSupply() != supply)
    panic("Total supply is not what it is expected to be.");
  endif

  print("Total supply: ");
  printLn(toUInt64(totalSupply()));

  if(balanceOf(owner) != supply)
    panic("Owner does not own all the tokens: " + toString(toUInt64(balanceOf(owner))));
  endif

  print("Owner funds: ");
  printLn(toUInt64(balanceOf(owner)));

  var counter_party = Address("MnrRHdvCkdZodEwM855vemS5V3p2hiWmcSQ8JEzD4ZjPdsYtB");
  var success = transfer(owner, counter_party, UInt256(u_transfer));
  if(!success)
    panic("Transfer was not successful.");
  endif

  if(balanceOf(owner) != UInt256(u_supply - u_transfer))
    panic("Owner balance incorrect: " + toString(toUInt64(balanceOf(owner))));
  endif

  if(balanceOf(counter_party) != UInt256(u_transfer))
    panic("Counter party balance incorrect: " + toString(toUInt64(balanceOf(counter_party))) );
  endif

endfunction

@init
function createSupply(owner: Address)
  createSupplyImpl(owner, UInt256(12619924713u64));
endfunction

function createSupplyImpl(owner: Address, supply: UInt256)
  var supply_state = State< UInt256 >("total_supply");  
  supply_state.set(supply);

  var balance_state = State< UInt256 >(owner);
  balance_state.set( supply );
endfunction

// totalSupply() public view returns (uint256 totalSupply) [Get the total token supply]
@query
function totalSupply(): UInt256
  var supply_state = State< UInt256 >("total_supply"); 
  return supply_state.get(UInt256(0u64)); 
endfunction

// balanceOf(address _owner) public view returns (uint256 balance) [Get the account balance of another account with address _owner]
@query
function balanceOf(owner: Address) : UInt256
  var balance_state = State< UInt256 >(owner);

  if(!balance_state.existed())
    return UInt256(0u64);
  endif

  return balance_state.get();
endfunction

// transfer(address _to, uint256 _value) public returns (bool success) [Send _value amount of tokens to address _to]
// transferFrom(address _from, address _to, uint256 _value) public returns (bool success)[Send _value amount of tokens from address _from to address _to]
// Not that the Fetch ledger does not have an implicit from address. Hence, we need a 
// different function signature
@action
function transfer(from: Address, to: Address, value: UInt256) : Bool
  if(!from.signedTx())
    return false;
  endif

  var from_state = State< UInt256 >(from);
  var from_balance = from_state.get( UInt256(0u64) );
  if(from_balance < value)
    return false;
  endif

  var to_state = State< UInt256 >(to);
  var to_balance = to_state.get( UInt256(0u64) );

  // TODO: Polyfilling due to missing UInt256 functionality
  var u_from = toUInt64(from_balance);  
  var u_to = toUInt64(to_balance);
  var u_amount = toUInt64(value);
  u_from -= u_amount;
  u_to += u_amount;
  from_balance = UInt256(u_from);
  to_balance = UInt256(u_to);  

  from_state.set(from_balance);
  to_state.set(to_balance);
  return true;
endfunction


// approve(address _spender, uint256 _value) public returns (bool success) [Allow _spender to withdraw from your account, multiple times, up to the _value amount. If this function is called again it overwrites the current allowance with _value]
@action
function approve(owner: Address, spender: Address, value: UInt256) : Bool
  var state = ShardedState< UInt256 >(spender);
  state.set(owner, value);
  return true;
endfunction

// allowance(address _owner, address _spender) public view returns (uint256 remaining) [Returns the amount which _spender is still allowed to withdraw from _owner]
@query
function allowance(owner: Address, spender: Address) : UInt256
  var state = ShardedState< UInt256 >(spender);
  return state.get(owner, UInt256(0u64));
endfunction

@action
function spendAllowance(owner: Address, spender: Address, to: Address, value: UInt256) : Bool
  // TODO: Implement.
  return true;
endfunction