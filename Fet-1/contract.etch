//------------------------------------------------------------------------------
//
//   Copyright 2019 Fetch.AI Limited
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//
//------------------------------------------------------------------------------

// This contract require release 0.4.0 or above
// Note that this is experimental functionality

//Non-Fungible token generation contract 

/**
 * Test functions
 **/

function main()
  var owner = Address("2ifr5dSFRAnXexBMC3HYEVp3JHSuz7KBPXWDRBV4xdFrqGy6R9");
  var counter_party = Address("MnrRHdvCkdZodEwM855vemS5V3p2hiWmcSQ8JEzD4ZjPdsYtB");
  var total_supply = 10000;

  // Creating supply
  createTokensImpl(owner, total_supply);
  testOwnersAfterCreate(owner);

  // Testing that supply of owner address is what we expect it to be
  var b = balanceOf(owner);
  print("balance: ");
  printLn(toUInt64(b));
  if(b != UInt256(toUInt64(total_supply)))
    panic("Expected " + toString(total_supply) + " tokens.");
  endif
  
  var token = getTokenId(9);
  transferFrom(owner, counter_party, token);

  b = balanceOf(owner);
  print("balance: ");
  printLn(toUInt64(b));
  if(b != UInt256(toUInt64(total_supply - 1)))
    panic("Expected " + toString(total_supply - 1) + " tokens.");
  endif

  b = balanceOf(counter_party);
  print("balance: ");
  printLn(toUInt64(b));
  if(b != UInt256(toUInt64(1)))
    panic("Expected 1 tokens.");
  endif
endfunction

function testOwnersAfterCreate(owner: Address)
  var objects_state = State< Array< UInt256 > >(owner);
  var tokens = objects_state.get(Array< UInt256 >(0));

  var owner_state = ShardedState< Address >("tokens.owner");

  for(i in 0:tokens.count()-1)
    var tid = tokens[i];
    var found_owner = owner_state.get(toString(tid));

    if(owner != found_owner)
      panic("Wrong owner in test case.");
    endif
  endfor
endfunction

function testOwnerOf()
  var token_id = UInt256("hello world");
  var hasher = SHA256();
  hasher.update(token_id);
  token_id = hasher.final();
endfunction

/**
 * Main implementation
 **/
@init
function createTokens(owner: Address)
  createTokensImpl(owner, 10000);
endfunction

function createTokensImpl(owner: Address, total_supply : Int32)
  if(owner == null)
    panic("owner cannot be null.");
  endif

  var objects_state = State< Array< UInt256 > >(owner);
  var tokens        = Array< UInt256 >(total_supply);

  // Genereating tokens
  var token_id = UInt256("hello world");
  for(i in 0:tokens.count()-1)
    var hasher = SHA256();
    hasher.update(token_id);
    token_id = hasher.final();
    tokens[i] = token_id;
  endfor

  // Assigning owner
  var owner_state = ShardedState< Address >("tokens.owner");
  for(i in 0:tokens.count()-1)
    var tid = tokens[i];
    owner_state.set(toString(tid), owner);
  endfor

  // Storing the tokens on the owners address
  objects_state.set(tokens);
endfunction

@query
function getTokenId(number: Int32) : UInt256
  // We generate token ids by consecutively hashing
  // the previous token name, starting with "hello world"
  // as seed.
  var token = UInt256("hello world");
  for(i in 0:number)
    var hasher = SHA256();
    hasher.update(token);
    token = hasher.final();
  endfor

  return token;
endfunction


@query
function isEqual(number: Int32, expected: UInt256) : Bool
  // We generate token ids by consecutively hashing
  // the previous token name, starting with "hello world"
  // as seed.
  var token = UInt256("hello world");
  for(i in 0:number)
    var hasher = SHA256();
    hasher.update(token);
    token = hasher.final();
  endfor

  if(token != expected)
    panic("Token ids differ: " + toString(token) + " vs. " + toString(expected));
  endif

  return true;
endfunction

/// @notice Count all NFTs assigned to an owner
/// @dev NFTs assigned to the zero address are considered invalid, and this
/// function throws for queries about the zero address.
/// @param _owner An address for whom to query the balance
/// @return The number of NFTs owned by `_owner`, possibly zero
// function balanceOf(address _owner) external view returns (uint256);
@query
function balanceOf(owner: Address) : UInt256
  var objects_state = State< Array< UInt256 > >(owner);
  var tokens = objects_state.get( Array< UInt256 >(0) );
  var ret = UInt256( toUInt64(tokens.count()) );

  return ret;
endfunction


/// @notice Find the owner of an NFT
/// @dev NFTs assigned to zero address are considered invalid, and queries
///  about them do throw.
/// @param _tokenId The identifier for an NFT
/// @return The address of the owner of the NFT
// function ownerOf(u int256 _tokenId) external view returns (address);
@query
function ownerOf(token_id: UInt256) : Address
  var owner_state = ShardedState< Address >("tokens.owner");

  return owner_state.get(toString(token_id), null);
endfunction

/// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE
///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE
///  THEY MAY BE PERMANENTLY LOST
/// @dev Throws unless `msg.sender` is the current owner, an authorized
///  operator, or the approved address for this NFT. Throws if `_from` is
///  not the current owner. Throws if `_to` is the zero address. Throws if
///  `_tokenId` is not a valid NFT.
/// @param _from The current owner of the NFT
/// @param _to The new owner
/// @param _tokenId The NFT to transfer
// function transferFrom(address _from, address _to, uint256 _tokenId) external payable;
@action
function transferFrom(from: Address, to: Address, token_id: UInt256)
  if(!from.signedTx()) 
    panic("Invalid signature from owner.");
  endif

  var owner_state = ShardedState< Address >("tokens.owner");
  var owner = owner_state.get(toString(token_id));

  if(owner != from)
    panic("Owner does not actually own the token");
  endif

  var from_state   = State< Array< UInt256 > >(from);
  var from_objects = from_state.get( Array< UInt256 >(0) );
  var found        = false;
  var position : Int32;


  for(i in 0:from_objects.count()-1)
    var tid = from_objects[i];
    if(tid == token_id)
      if(found)
        panic("Contract broken - token is only supposed be represented once.");
      endif

      found = true;
      position = i;
      break;
    endif
  endfor

  if(!found)
    panic("Contract is fundamentally broken - owner has not been updated correctly");
  endif

  from_objects[position] = from_objects[from_objects.count() - 1];
  from_objects.popBack();

  var to_state   = State< Array< UInt256 > >(to);
  var to_objects = to_state.get( Array< UInt256 >(0) );
  to_objects.append(token_id);

  // updating sender
  from_state.set(from_objects);

  // Updating receiver
  to_state.set(to_objects);

  // Updating owner
  owner = to;
  owner_state.set(toString(token_id), owner);
endfunction


/**
 * Functions below are still on the to do list, but should easy to 
 * implement at this stage.
 **/

/// @notice Set or reaffirm the approved address for an NFT
/// @dev The zero address indicates there is no approved address.
/// @dev Throws unless `msg.sender` is the current NFT owner, or an authorized
///  operator of the current owner.
/// @param _approved The new approved NFT controller
/// @param _tokenId The NFT to approve
// function approve(address _approved, uint256 _tokenId) external payable;

/// @notice Enable or disable approval for a third party ("operator") to manage
///  all of `msg.sender`'s assets.
/// @dev Emits the ApprovalForAll event. The contract MUST allow
///  multiple operators per owner.
/// @param _operator Address to add to the set of authorized operators.
/// @param _approved True if the operator is approved, false to revoke approval
// function setApprovalForAll(address _operator, bool _approved) external;

/// @notice Get the approved address for a single NFT
/// @dev Throws if `_tokenId` is not a valid NFT
/// @param _tokenId The NFT to find the approved address for
/// @return The approved address for this NFT, or the zero address if there is none
// function getApproved(uint256 _tokenId) external view returns (address);

/// @notice Query if an address is an authorized operator for another address
/// @param _owner The address that owns the NFTs
/// @param _operator The address that acts on behalf of the owner
/// @return True if `_operator` is an approved operator for `_owner`, false otherwise
/// function isApprovedForAll(address _owner, address _operator) external view returns (bool);

